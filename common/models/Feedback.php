<?php


namespace common\models;
use yii\db\ActiveRecord;

class Feedback extends ActiveRecord
{
    public $reCaptcha;
    public function attributeLabels() {
        return [
            'name' => 'Ваше имя',
            'surname' => 'Ваша фамилия',
            'phone' => 'Ваше телефон',
            'email' => 'Ваш email',
            'text' => 'Сообщение',
        ];
    }

    public function rules() {
        return [
            ['name', 'required', 'message' => 'Поле «Ваше имя» обязательно для заполнения'],
            ['name', 'string', 'min' => 3, 'tooShort' => 'Поле «Ваше имя» должно быть длиной не менее 3 символов'],
            ['name', 'match', 'pattern'=>'/^[a-zA-Zа-яёА-ЯЁ]+$/u', 'message' => 'Поле «Ваше имя» должно содержать только буквы'],
            ['surname', 'required', 'message' => 'Поле «Ваша фамилия» обязательно для заполнения'],
            ['surname', 'string', 'min' => 3, 'tooShort' => 'Поле «Ваша фамилия» должно быть длиной не менее 3 символов'],
            ['surname', 'match', 'pattern'=>'/^[a-zA-Zа-яёА-ЯЁ]+$/u', 'message' => 'Поле «Ваша фамилия» должно содержать только буквы'],
            ['phone', 'required', 'message' => 'Поле «Ваш телефон» обязательно для заполнения'],
            ['email', 'required', 'message' => 'Поле «Ваш email» обязательно для заполнения'],
            ['email', 'email', 'message' => 'Поле «Ваш email» должно быть адресом почты'],
            ['text', 'required', 'message' => 'Поле «Сообщение» обязательно для заполнения'],
            ['text', 'string', 'min' => 10, 'tooShort' => 'Поле «Сообщение» должно быть длиной не менее 100 символов'],
            [['reCaptcha'], \himiklab\yii2\recaptcha\ReCaptchaValidator2::className(),
                'secret' => '6LeIxAcTAAAAAGG-vFI1TnRWxMZNFuojJ4WifJWe', // unnecessary if reСaptcha is already configured
                'uncheckedMessage' => 'Please confirm that you are not a bot.'],
        ];
    }
    public function beforeValidate()
    {
        $this->name = $this->mb_ucfirst($this->name);
        $this->surname = $this->mb_ucfirst($this->surname);
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    function mb_ucfirst($string, $encoding = 'UTF-8'){
        $strlen = mb_strlen($string, $encoding);
        $firstChar = mb_substr($string, 0, 1, $encoding);
        $then = mb_substr($string, 1, $strlen - 1, $encoding);
        return mb_strtoupper($firstChar, $encoding) . $then;
    }

}